<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Code Conventions</title>
	</properties>

	<head></head>

	<body>
		<div class="dip">
			<section name="Code Conventions">

				<subsection name="Dependencies">
					<p>Sure, sure; don't reinvent the wheel. On the other hand, we might
						really not wanna introduce yet another dependency...
						Not for some trivial stuff anyways.
					</p>
					<p>List of dependencies (and reason for their introduction):
					</p>
					<dl>
						<dt>Guava (Google Core Libraries for Java)</dt>
						<dd>
							<p>
								Keep in mind that Guava targets JDK 6+, so a lot of its
								packages are pretty much rendered obsolete/superseded by JDK 8.
								So far we're just using the eventbus and the reflection package:
							</p>
							<ul>
								<li>com.google.common.eventbus</li>
								<li>com.google.common.reflect</li>
							</ul>
							<ul>
								<li>
									<a href="https://github.com/google/guava">
										https://github.com/google/guava
									</a>
								</li>
							</ul>
						</dd>
					</dl>
				</subsection>

				<subsection name="Model-View-Presenter (Passive View)">
					<p>
						The Passive View Pattern &ndash; <i>"yet another variation on
							model-view-controller and model-view-presenter"</i> &ndash; is
						a perfect match for JavaFX, FXML and its various properties one
						can easily bind to.
					</p>
					<p>
						There is not much convention needed. A model is option, and
						the view simply has to pass it's parent (or root) component
						to the presenter, which in turn passes it along to some
						other parent that manages this component. For simple things
						(e.g. the application menu) the view can simply be merged
						into the presenter &mdash; nobody cares.
					</p>
					<p>
						FXML can be easily used if desired, in which case presenter
						(called controller here) and view are retrieved with the
						<tt>FXMLLoader</tt>. Otherwise the presenter get's model
						and view (can be mocks for testing) passed by its constructor,
						s.t. the presenter knows about the model and the view, yet
						neither of those guys know about the presenter. And make good
						use of JavaFX properties s.t. the presenter can easily hook
						up the view.
					</p>

					<p>Further reading:</p>
					<ul>
						<li>
							<a href="http://martinfowler.com/eaaDev/PassiveScreen.html">
								http://martinfowler.com/eaaDev/PassiveScreen.html
							</a>
						</li>
					</ul>
				</subsection>

				<subsection name="Internationalization (L10n)">
					<ul>
						<li>Don't hardcode strings that get's presented to the user,
							but make use of the class <tt>L10n</tt> (backed by
							ResourceBundles based on ordinary Javaproperty files)
							instead.<br />
							Views and dialogs (and similar...) can extend from
							<tt>AbstractLocale</tt>	which implements some convenience
							methods.
						</li>
						<li>ResourceBundles (<tt>LABELS</tt> and <tt>MESSAGES</tt>
							so far...) are global, not per component.</li>
						<li>Log messages are always english. Do <em>not</em>
							translate those guys.</li>
					</ul>
				</subsection>

				<subsection name="Unit and Integration Tests">

					<blockquote>
						<p>"Every line of code has been reached," which, from the perspective
							of theory of computation, is pure nonsense in terms of knowing whether
							the code does what it should.</p>
						<cite>
							James O Coplien, in:
							<a href="http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf">
								Why Most Unit Testing is Waste
							</a>
						</cite>
					</blockquote>

					<p>
						<em>Maven Surefire</em> and <em>Maven Failsafe</em> are used
						for unit and integration tests.</p>
					<ul>
						<li>Several Maven profiles are configured. With the default
							profile only unit tests, but no integration tests are run.</li>
						<li>Inversion of Control is especially nice for testing, however no
							magic dependency injection framework/tricks are used to keep
							things simple. Just pass components around the old fashioned
							way with a good old constructor...</li>
						<li>Unit test classes must have the prefix: <tt>Test</tt></li>
						<li>Integration test classes must have the prefix: <tt>IT</tt></li>
					</ul>

					<p>Further reading:</p>
					<ul>
						<li>
							<a href="http://martinfowler.com/tags/testing.html">
								http://martinfowler.com/tags/testing.html
							</a>
						</li>
						<li>
							<a href="http://martinfowler.com/articles/injection.html">
								http://martinfowler.com/articles/injection.html
							</a>
						</li>
					</ul>
				</subsection>

			</section>
		</div>
	</body>
</document>
