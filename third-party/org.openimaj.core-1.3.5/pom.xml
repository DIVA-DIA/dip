<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>ch.unifr.diva.dip</groupId>
		<artifactId>dip-pom-osgi-repackage</artifactId>
		<version>1.0.0-SNAPSHOT</version>
		<relativePath>../pom-osgi-repackage/pom.xml</relativePath>
	</parent>

	<groupId>ch.unifr.diva.dip.libs</groupId>
	<artifactId>org.openimaj.core</artifactId>
	<version>1.3.5</version>

	<name>OpenIMAJ core</name>
	<description>
		OpenIMAJ is an award-winning set of libraries and tools for multimedia
		(images, text, video, audio, etc.) content analysis and content generation.
	</description>
	<packaging>bundle</packaging>

	<repositories>
		<repository>
			<id>maven-central</id>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
		<!-- some older dependencies (e.g. jal) are only available from here -->
		<repository>
			<id>openimaj-maven</id>
			<url>http://maven.openimaj.org/</url>
		</repository>
	</repositories>

	<properties>
		<osgi.repackage.skip>false</osgi.repackage.skip>
		<openimaj.version>1.3.5</openimaj.version>
		<jal.version>20031117</jal.version>
		<!-- artif. low version since we have to export this ancient version of jbibtex -->
		<jbibtex.version>0.0.16-r16</jbibtex.version>
		<osgi.bundle.exportPackage>
			org.openimaj*,
			<!-- embedded jbibtex (r16) -->
			org.jbibtex*;version="${jbibtex.version}",
			<!-- jal needs to be exported for machine-learning, and maybe others -->
			jal.*;version="${jal.version}",
			!*
		</osgi.bundle.exportPackage>
		<osgi.bundle.importPackage>
			COM.jrockit.*;resolution:=optional,   <!-- embedded kryo -->
			COM.newmonics.*;resolution:=optional, <!-- embedded kryo -->
			jrockit.vm;resolution:=optional,      <!-- embedded kryo -->
			org.jbibtex*;version="${jbibtex.version}",
			jal.*;version="${jal.version}",
			*
		</osgi.bundle.importPackage>
		<osgi.bundle.embedDependency>
			core,
			jal,                      <!-- used by: core -->
			jbibtex,                  <!-- used by: core -->
			objenesis,                <!-- used by: core -->
			kryo,                     <!-- used by: core -->
			core-citation,
			core-aop-support
		</osgi.bundle.embedDependency>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>core</artifactId>
			<version>${openimaj.version}</version>
		</dependency>

		<!-- used by core: old package from openimaj repo, unlikely to be needed
		ever again -->
		<dependency>
			<groupId>vigna.dsi.unimi.it</groupId>
			<artifactId>jal</artifactId>
			<version>${jal.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- used by core: old package from openimaj repo, unlikely to be needed
		ever again; but needs to be exported (exposed private references) -->
		<dependency>
			<groupId>org.jbibtex</groupId>
			<artifactId>jbibtex</artifactId>
			<version>r16</version>
		</dependency>

		<!-- used by core: kryo and objenesis are embedded (and not exported) since
		we're likely running into wiring issues (two dependency chains) otherwise,
		or at some later point with newer versions of kryo: core has a dependency
		on objenesis 1.2, so does kryo 2.21 (everything is fine), but if we use a
		newer version of kryo that uses a newer version of objenesis, we're running
		into problems, since core still wants to use objenesis 1.2, while kryo now
		wants objenesis 2.4 (or what not). -->
		<dependency>
			<groupId>com.esotericsoftware.kryo</groupId>
			<artifactId>kryo</artifactId>
			<version>2.21</version>
		</dependency>

		<dependency>
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>core-citation</artifactId>
			<version>${openimaj.version}</version>
		</dependency>

		<dependency>
			<groupId>org.openimaj</groupId>
			<artifactId>core-aop-support</artifactId>
			<version>${openimaj.version}</version>
		</dependency>

	</dependencies>

</project>
